import{_ as e,c as i,o as t,s as o}from"./chunks/framework.C0aFDVig.js";const u=JSON.parse('{"title":"代码分支管理规则：","description":"","frontmatter":{},"headers":[{"level":1,"title":"代码分支管理规则：","slug":"代码分支管理规则","link":"#代码分支管理规则","children":[]}],"relativePath":"articles/工作文档/项目/代码分支管理规则.md","filePath":"articles/工作文档/项目/代码分支管理规则.md"}'),r={name:"articles/工作文档/项目/代码分支管理规则.md"};function a(c,l,s,d,g,_){return t(),i("div",null,l[0]||(l[0]=[o('<h1 id="代码分支管理规则" tabindex="-1">代码分支管理规则： <a class="header-anchor" href="#代码分支管理规则" aria-label="Permalink to &quot;代码分支管理规则：&quot;">​</a></h1><ol><li>新功能开发（bug修改） 从master上切出一个新的功能（bug修复）分支</li><li>开发人员应该使用自己的个人分支进行开发，开发后合并到功能分支</li><li>开发完成由开发人员合到release进行测试</li><li>测试完毕，上正式： <ol><li>需要更新的开发人员，在研发云提起合并请求，管理员审核通过后合并</li><li>管理员直接把功能（bug修复）分支合并到master上后，推送至云端</li><li>开发人员发布部署需求至运维人员处，运维人员进行更新</li></ol></li><li>关于提交信息，请参考之前制定的<a href="https://docs.srdcloud.cn/docs/8Nk6MwrVmNUdxVqL?" target="_blank" rel="noreferrer">git 提交规范</a></li><li>关于<code>git pull</code>会产生多余<code>merge</code>信息的说明： 因为<code>git pull</code>命令会产生两步操作<code>git fetch</code>和<code>git merge</code>，<code>git pull</code>默认会拉取远程分支并尝试合并，如果合并成功，会生成一个合并提交，增加一条记录 <strong>解决方法：</strong><ol><li>使用命令行设置pull.rebase 默认为true <ol><li>全局所有git仓库均设置为true：==git config --global pull.rebase true==</li><li>仅当前git仓库设置为true：（仓库文件夹路径下执行）==git config pull.rebase true==</li></ol></li><li>使用命令行，每次拉取代码为git pull命令加额外参数：==git pull --rebase==</li><li>使用Git工具时，可能需要找对应平台设置git pull --rebase的配置</li><li>提交前，将本地的提交先使用git stash</li></ol></li><li>关于Tag（版本）的发布（一般由管理员发布） <ol><li>每个正式版本都应该是一个Tag</li><li>Tag的格式为 主版本号.次版本号.更新日期.版本次序</li><li>每个版本的信息应该详细记录每次更新的所有主要内容</li></ol><blockquote><p>例子： 2025年03月09日更新了版本，那么我们的版本号应该是<code>1.1.20250309</code>； 当天又更新了第二个版本，版本号则为<code>1.1.20250309-1</code></p></blockquote></li></ol><p>#电信</p>',3)]))}const p=e(r,[["render",a]]);export{u as __pageData,p as default};
